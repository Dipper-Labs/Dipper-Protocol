package vm_test

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"

	abci "github.com/tendermint/tendermint/abci/types"
	"github.com/tendermint/tendermint/crypto/ed25519"
	"github.com/tendermint/tendermint/libs/log"

	"github.com/Dipper-Labs/Dipper-Protocol/app"
	"github.com/Dipper-Labs/Dipper-Protocol/app/protocol"
	"github.com/Dipper-Labs/Dipper-Protocol/app/v0/auth"
	"github.com/Dipper-Labs/Dipper-Protocol/app/v0/params"
	"github.com/Dipper-Labs/Dipper-Protocol/app/v0/vm"
	"github.com/Dipper-Labs/Dipper-Protocol/hexutil"
	"github.com/Dipper-Labs/Dipper-Protocol/store"
	sdk "github.com/Dipper-Labs/Dipper-Protocol/types"
)

func Benchmark_handleMsgContract(b *testing.B) {
	cdc := app.MakeLatestCodec()

	// params
	paramsKeeper := params.NewKeeper(cdc, protocol.Keys[params.StoreKey], protocol.TKeys[params.TStoreKey])
	authSubspace := paramsKeeper.Subspace(auth.DefaultParamspace)
	vmSubspace := paramsKeeper.Subspace(vm.DefaultParamspace)

	// keeper
	accountKeeper := auth.NewAccountKeeper(cdc, protocol.Keys[auth.StoreKey], authSubspace, auth.ProtoBaseAccount)
	vmKeeper := vm.NewKeeper(cdc, protocol.Keys[vm.StoreKey], vmSubspace, accountKeeper)

	// new db
	dataDir := filepath.Join("/tmp", "testdata")
	defer os.RemoveAll(dataDir)
	db, err := sdk.NewLevelDB("application", dataDir)
	require.Nil(b, err)

	// new store
	ms := store.NewCommitMultiStore(db)
	ms.SetPruning(store.PruneSyncable)

	// mount stores
	ms.MountStoreWithDB(protocol.Keys[params.StoreKey], sdk.StoreTypeIAVL, nil)
	ms.MountStoreWithDB(protocol.Keys[auth.StoreKey], sdk.StoreTypeIAVL, nil)
	ms.MountStoreWithDB(protocol.Keys[vm.StoreKey], sdk.StoreTypeIAVL, nil)

	// mount tstores
	ms.MountStoreWithDB(protocol.TKeys[params.TStoreKey], sdk.StoreTypeTransient, nil)

	// load store
	ms.LoadLatestVersion()

	// new context
	logger := log.NewNopLogger()
	//logger := log.NewTMLogger(log.NewSyncWriter(os.Stdout))
	ctx := sdk.NewContext(ms, abci.Header{}, false, nil).WithLogger(logger).WithGasMeter(sdk.NewGasMeter(1000000000000000))

	// generate accounts
	coins := sdk.NewCoins(sdk.NewCoin(sdk.NativeTokenName, sdk.NewInt(sdk.NativeTokenFraction*1000)))
	var addrs []sdk.AccAddress
	for i := 0; i < b.N; i++ {
		privateKey := ed25519.GenPrivKey()
		publicKey := privateKey.PubKey()
		address := publicKey.Address()
		addr, err := sdk.AccAddressFromHex(address.String())
		if err != nil {
			b.Fatal(err)
		}

		addrs = append(addrs, addr)
		acc := accountKeeper.NewAccountWithAddress(ctx, addr)
		acc.SetCoins(coins)
		accountKeeper.SetAccount(ctx, acc)
	}

	// setup msgs
	contractCodeStr := "60806040527304fa2c6673f3283681ea40d1f07314b3624ab6e56000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620f424060015534801561006b57600080fd5b506122008061007b6000396000f3fe6080604052600436106100c25760003560e01c8063831518b71161007f578063ca05410b11610059578063ca05410b146105e1578063cd5d21181461065c578063de92fbd3146106ad578063fc6f9468146107ff576100c2565b8063831518b714610307578063a23e3e0814610332578063b8b3b20d1461048f576100c2565b80630655f316146100c75780633e14562d146101a757806362dec2f61461021357806364384dc0146102645780637181c4a41461026e5780637e9307d4146102cc575b600080fd5b3480156100d357600080fd5b5061018d600480360360208110156100ea57600080fd5b810190808035906020019064010000000081111561010757600080fd5b82018360208201111561011957600080fd5b8035906020019184600183028401116401000000008311171561013b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610856565b604051808215151515815260200191505060405180910390f35b3480156101b357600080fd5b506101bc61088c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101ff5780820151818401526020810190506101e4565b505050509050019250505060405180910390f35b34801561021f57600080fd5b506102626004803603602081101561023657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061091a565b005b61026c610c52565b005b34801561027a57600080fd5b506102ca6004803603604081101561029157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190505050611061565b005b3480156102d857600080fd5b50610305600480360360208110156102ef57600080fd5b81019080803590602001909291905050506113ba565b005b34801561031357600080fd5b5061031c61141a565b6040518082815260200191505060405180910390f35b34801561033e57600080fd5b506103816004803603602081101561035557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611420565b604051808060200180602001868152602001851515151581526020018460038111156103a957fe5b60ff168152602001838103835288818151815260200191508051906020019080838360005b838110156103e95780820151818401526020810190506103ce565b50505050905090810190601f1680156104165780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b8381101561044f578082015181840152602081019050610434565b50505050905090810190601f16801561047c5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b6105df600480360360408110156104a557600080fd5b81019080803590602001906401000000008111156104c257600080fd5b8201836020820111156104d457600080fd5b803590602001918460018302840111640100000000831117156104f657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561055957600080fd5b82018360208201111561056b57600080fd5b8035906020019184600183028401116401000000008311171561058d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506115a0565b005b3480156105ed57600080fd5b5061061a6004803603602081101561060457600080fd5b8101908080359060200190929190505050611cb4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561066857600080fd5b506106ab6004803603602081101561067f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cf0565b005b6107fd600480360360408110156106c357600080fd5b81019080803590602001906401000000008111156106e057600080fd5b8201836020820111156106f257600080fd5b8035906020019184600183028401116401000000008311171561071457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561077757600080fd5b82018360208201111561078957600080fd5b803590602001918460018302840111640100000000831117156107ab57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611dbf565b005b34801561080b57600080fd5b506108146120c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6004818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6060600280548060200260200160405190810160405280929190818152602001828054801561091057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c6575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461097057fe5b6109786120e9565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b820191906000526020600020905b815481529060010190602001808311610a3e57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610afd5780601f10610ad257610100808354040283529160200191610afd565b820191906000526020600020905b815481529060010190602001808311610ae057829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff166003811115610b4957fe5b6003811115610b5457fe5b81525050905060015481604001511015610b6d57600080fd5b600181606001901515908115158152505080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610bda929190612125565b506020820151816001019080519060200190610bf7929190612125565b506040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690836003811115610c4657fe5b02179055509050505050565b610c5a6120e9565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d3d5780601f10610d1257610100808354040283529160200191610d3d565b820191906000526020600020905b815481529060010190602001808311610d2057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ddf5780601f10610db457610100808354040283529160200191610ddf565b820191906000526020600020905b815481529060010190602001808311610dc257829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff166003811115610e2b57fe5b6003811115610e3657fe5b815250509050600081604001511415610e4e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc82604001519081150290604051600060405180830381858888f19350505050158015610e98573d6000803e3d6000fd5b506000600482600001516040518082805190602001908083835b60208310610ed55780518252602082019150602081019050602083039250610eb2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff02191690831515021790555060405180602001604052806000815250816000018190525060405180602001604052806000815250816020018190525060008160400181815250506000816060019015159081151581525050600281608001906003811115610f7d57fe5b90816003811115610f8a57fe5b8152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610fea929190612125565b506020820151816001019080519060200190611007929190612125565b506040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff0219169083600381111561105657fe5b021790555090505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110b757fe5b6110bf6120e9565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111a25780601f10611177576101008083540402835291602001916111a2565b820191906000526020600020905b81548152906001019060200180831161118557829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112445780601f1061121957610100808354040283529160200191611244565b820191906000526020600020905b81548152906001019060200180831161122757829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff16600381111561129057fe5b600381111561129b57fe5b81525050905060008160400151116112b257600080fd5b600081606001901515908115158152505081816080019060038111156112d457fe5b908160038111156112e157fe5b8152505080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611341929190612125565b50602082015181600101908051906020019061135e929190612125565b506040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff021916908360038111156113ad57fe5b0217905550905050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461141057fe5b8060018190555050565b60015481565b6003602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114cc5780601f106114a1576101008083540402835291602001916114cc565b820191906000526020600020905b8154815290600101906020018083116114af57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561156a5780601f1061153f5761010080835404028352916020019161156a565b820191906000526020600020905b81548152906001019060200180831161154d57829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16905085565b6115a86120e9565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561168b5780601f106116605761010080835404028352916020019161168b565b820191906000526020600020905b81548152906001019060200180831161166e57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561172d5780601f106117025761010080835404028352916020019161172d565b820191906000526020600020905b81548152906001019060200180831161171057829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff161515151581526020016003820160019054906101000a900460ff16600381111561177957fe5b600381111561178457fe5b815250509050600081604001511161179b57600080fd5b60008351116117a957600080fd5b6060836040516020018082805190602001908083835b602083106117e257805182526020820191506020810190506020830392506117bf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040529050606082600001516040516020018082805190602001908083835b602083106118555780518252602082019150602081019050602083039250611832565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052905060006002836040518082805190602001908083835b602083106118c357805182526020820191506020810190506020830392506118a0565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015611905573d6000803e3d6000fd5b5050506040513d602081101561191a57600080fd5b8101908080519060200190929190505050905060006002836040518082805190602001908083835b602083106119655780518252602082019150602081019050602083039250611942565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156119a7573d6000803e3d6000fd5b5050506040513d60208110156119bc57600080fd5b81019080805190602001909291905050509050600015156004886040518082805190602001908083835b60208310611a0957805182526020820191506020810190506020830392506119e6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615151480611a5757508082145b611a6057600080fd5b6000348660400151019050600154811015611a7a57600080fd5b60016004896040518082805190602001908083835b60208310611ab25780518252602082019150602081019050602083039250611a8f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908315150217905550818314611b8a576000600487600001516040518082805190602001908083835b60208310611b3f5780518252602082019150602081019050602083039250611b1c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055505b878660000181905250868660200181905250808660400181815250506000866060019015159081151581525050600386608001906003811115611bc957fe5b90816003811115611bd657fe5b8152505085600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611c36929190612125565b506020820151816001019080519060200190611c53929190612125565b506040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690836003811115611ca257fe5b02179055509050505050505050505050565b60028181548110611cc157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d4657fe5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611d7c57fe5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600014611e0e57600080fd5b600154341015611e1d57600080fd5b6000825111611e2b57600080fd5b6004826040518082805190602001908083835b60208310611e615780518252602082019150602081019050602083039250611e3e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615156000151514611eb257600080fd5b611eba6120e9565b828160000181905250818160200181905250348160400181815250506000816060019015159081151581525050600081608001906003811115611ef957fe5b90816003811115611f0657fe5b8152505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190611f66929190612125565b506020820151816001019080519060200190611f83929190612125565b506040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555060808201518160030160016101000a81548160ff02191690836003811115611fd257fe5b021790555090505060016004846040518082805190602001908083835b602083106120125780518252602082019150602081019050602083039250611fef565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060a001604052806060815260200160608152602001600081526020016000151581526020016000600381111561211f57fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061216657805160ff1916838001178555612194565b82800160010185558215612194579182015b82811115612193578251825591602001919060010190612178565b5b5090506121a191906121a5565b5090565b6121c791905b808211156121c35760008160009055506001016121ab565b5090565b9056fea26469706673582212208e4451729a14b08551f6bf11f2c18fcf7b7eabc6ce0679d5448e04cfd919d24164736f6c63430006000033"
	contractCode, err := hexutil.Decode(contractCodeStr)
	require.Nil(b, err)
	amount := sdk.NewCoin(sdk.NativeTokenName, sdk.NewInt(0))
	var msgs []vm.MsgContract
	for _, addr := range addrs {
		msg := vm.NewMsgContract(addr, nil, contractCode, amount)
		msgs = append(msgs, msg)
	}

	// setup vm keeper params
	params := vm.DefaultParams()
	vmKeeper.SetParams(ctx, params)

	// reset timer
	ms.Commit()
	b.ResetTimer()

	// benchmark test
	for i := 0; i < b.N; i++ {
		vm.HandleMsgContract(ctx, msgs[i], vmKeeper)
	}

	ms.Commit()
}
