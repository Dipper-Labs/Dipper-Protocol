package types

import (
	"testing"

	"github.com/stretchr/testify/require"

	abci "github.com/tendermint/tendermint/abci/types"
	"github.com/tendermint/tendermint/crypto"
	dbm "github.com/tendermint/tm-db"

	"github.com/Dipper-Labs/Dipper-Protocol/app/v0/auth"
	"github.com/Dipper-Labs/Dipper-Protocol/app/v0/params"
	"github.com/Dipper-Labs/Dipper-Protocol/codec"
	"github.com/Dipper-Labs/Dipper-Protocol/hexutil"
	"github.com/Dipper-Labs/Dipper-Protocol/store"
	sdk "github.com/Dipper-Labs/Dipper-Protocol/types"
)

var (
	gsImportData = []byte(`{"codes":{"a885e7b4659c4801e5501bf5460c44f45fec3d7764b97daa126cfb5151013e90":"60806040526004361061007b5760003560e01c80639c75ed6c1161004e5780639c75ed6c1461019c578063d9c90cff146101c7578063de8c50c81461021a578063e662bd25146102455761007b565b80632e1a7d4d146100805780633a6e3d98146100bb57806345596e2e1461010a5780638da5cb5b14610145575b600080fd5b34801561008c57600080fd5b506100b9600480360360208110156100a357600080fd5b8101908080359060200190929190505050610289565b005b3480156100c757600080fd5b506100f4600480360360208110156100de57600080fd5b810190808035906020019092919050505061034c565b6040518082815260200191505060405180910390f35b34801561011657600080fd5b506101436004803603602081101561012d57600080fd5b810190808035906020019092919050505061037e565b005b34801561015157600080fd5b5061015a6103ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a857600080fd5b506101b1610414565b6040518082815260200191505060405180910390f35b3480156101d357600080fd5b50610200600480360360208110156101ea57600080fd5b810190808035906020019092919050505061041a565b604051808215151515815260200191505060405180910390f35b34801561022657600080fd5b5061022f610428565b6040518082815260200191505060405180910390f35b6102876004803603602081101561025b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061042e565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e057fe5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610348573d6000803e3d6000fd5b5050565b60006103776000546103696001548561053590919063ffffffff16565b6105bb90919063ffffffff16565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d557fe5b6103de8161041a565b6103e457fe5b8060018190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600080548211159050919050565b60005481565b60006104393461034c565b9050600081340390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610488573d6000803e3d6000fd5b507f9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc4433843484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1505050565b60008083141561054857600090506105b5565b600082840290508284828161055957fe5b04146105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806106cc6021913960400191505060405180910390fd5b809150505b92915050565b60006105fd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610605565b905092915050565b600080831182906106b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561067657808201518184015260208101905061065b565b50505050905090810190601f1680156106a35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816106bd57fe5b04905080915050939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212204222d9732198380684d25bb3c9e975cd4ae4a7664c6d2a4d81ac457a590d9d7e64736f6c63430006000033"},"params":{"max_code_size":"1048576","vm_common_gas_params":{"contract_creation_gas":"53000","create_data_gas":"200"},"vm_op_gas_params":["0","3","5","3","5","5","5","5","8","8","0","5","0","0","0","0","3","3","3","3","3","3","3","3","3","3","3","3","3","3","0","0","30","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","2","700","2","2","2","3","2","3","2","3","2","700","700","2","3","700","20","2","2","2","0","2","2","5","0","0","0","0","0","0","0","0","2","3","3","3","800","0","8","10","2","2","2","1","0","0","0","0","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","32000","700","700","0","700","32000","0","0","0","0","700","0","0","0","0","0"]},"storage":[{"k":"d4381195e6325022c39e706656f9265a4e8f1d6b085c77df35afea5ec3d28e7c56a93f850d1f991422894de2dcef4feaa16fdcff","v":"0000000000000000000000000000000000000000000000000000000000000064"},{"k":"d4381195e6325022c39e706656f9265a4e8f1d6b32d00b46e89a55baf9c690aa91fbc843fdfc31cbb37dc0a2efc006c2fb9f6e66","v":"000000000000000000000000ff3244a1ddd5bbc80808a4f4de65f05aeaffbbf1"},{"k":"d4381195e6325022c39e706656f9265a4e8f1d6bb52ac93e76b01ef5bb7a28ef17bdccae2b4e18f67f0b060b40212bfcdc412587","v":"0000000000000000000000000000000000000000000000000000000000002710"}],"vm_logs":{"log_index":"2","logs":{"78ba938d6caae4d056bed8c246d3c49cfdcdc2ee1b679cfc8b527ae5ac9f3747":"[{\"address\":\"dip16supr90xxfgz9su7wpn9d7fxtf8g78ttcaujhg\",\"topics\":[\"9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44\"],\"data\":\"000000000000000000000000ff3244a1ddd5bbc80808a4f4de65f05aeaffbbf1000000000000000000000000506241274e298116479539896b2c0ef4a08cea7400000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003de\",\"blockNumber\":4,\"transactionHash\":\"78ba938d6caae4d056bed8c246d3c49cfdcdc2ee1b679cfc8b527ae5ac9f3747\",\"transactionIndex\":0,\"blockHash\":\"0000000000000000000000000000000000000000000000000000000000000000\",\"logIndex\":2,\"removed\":false}]","8a0a895b6851d13d86254e8b3da7df0b88cd7f71a77012b700f6e762e8506220":"[{\"address\":\"dip16supr90xxfgz9su7wpn9d7fxtf8g78ttcaujhg\",\"topics\":[\"9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44\"],\"data\":\"000000000000000000000000ff3244a1ddd5bbc80808a4f4de65f05aeaffbbf1000000000000000000000000506241274e298116479539896b2c0ef4a08cea7400000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003de\",\"blockNumber\":6,\"transactionHash\":\"8a0a895b6851d13d86254e8b3da7df0b88cd7f71a77012b700f6e762e8506220\",\"transactionIndex\":0,\"blockHash\":\"0000000000000000000000000000000000000000000000000000000000000000\",\"logIndex\":1,\"removed\":false}]"}}}`)
)

var (
	keys = sdk.NewKVStoreKeys(
		auth.StoreKey,
		StoreKey,
	)

	tkeys = sdk.NewTransientStoreKeys(params.TStoreKey)

	cdc = MakeTestCodec()
)

func MakeTestCodec() *codec.Codec {
	cdc := codec.New()
	sdk.RegisterCodec(cdc)
	auth.RegisterCodec(cdc)
	codec.RegisterCrypto(cdc)
	return cdc
}

func buildCommitStateDB() *CommitStateDB {
	paramsKeeper := params.NewKeeper(cdc, keys[params.StoreKey], tkeys[params.TStoreKey])
	accountKeeper := auth.NewAccountKeeper(
		cdc,
		keys[auth.StoreKey],
		paramsKeeper.Subspace(auth.DefaultParamspace),
		auth.ProtoBaseAccount,
	)

	db := dbm.NewMemDB()
	ms := store.NewCommitMultiStore(db)
	ms.MountStoreWithDB(keys[auth.StoreKey], sdk.StoreTypeDB, nil)
	ms.MountStoreWithDB(keys[StoreKey], sdk.StoreTypeDB, nil)
	ms.MountStoreWithDB(tkeys[params.TStoreKey], sdk.StoreTypeTransient, nil)
	_ = ms.LoadLatestVersion()
	return NewCommitStateDB(accountKeeper, keys[StoreKey]).WithContext(sdk.NewContext(ms, abci.Header{}, false, nil))
}

func TestCommitStateDB_ImportExport_State(t *testing.T) {
	commitStateDB := buildCommitStateDB()

	// import state from json
	var gsImport GenesisState
	err := cdc.UnmarshalJSON(gsImportData, &gsImport)
	require.True(t, err == nil)
	commitStateDB.ImportState(gsImport)

	// export state to json
	gsExport := commitStateDB.ExportState()

	// data exported should be equal to data imported
	require.True(t, gsImport.EqualWithoutParams(gsExport))
}

func TestCommitStateDB_ImportExport_Code(t *testing.T) {
	const (
		newCodeHex = "608060405234801561001057600080fd5b50604051610d40380380610d408339818101604052602081101561003357600080fd5b810190808051906020019092919050505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060018190555050610ca48061009c6000396000f3fe6080604052600436106100705760003560e01c8063726cab381161004e578063726cab381461029e57806372bf354b146103fd5780638da5cb5b14610428578063ddca3f431461047f57610070565b80632e1a7d4d146100755780634192c5e5146100b057806369fe0e2d14610263575b600080fd5b34801561008157600080fd5b506100ae6004803603602081101561009857600080fd5b81019080803590602001909291905050506104aa565b005b3480156100bc57600080fd5b5061021a600480360360608110156100d357600080fd5b81019080803590602001906401000000008111156100f057600080fd5b82018360208201111561010257600080fd5b8035906020019184600183028401116401000000008311171561012457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561018757600080fd5b82018360208201111561019957600080fd5b803590602001918460018302840111640100000000831117156101bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff169060200190929190505050610571565b604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561026f57600080fd5b5061029c6004803603602081101561028657600080fd5b8101908080359060200190929190505050610776565b005b6103fb600480360360608110156102b457600080fd5b81019080803590602001906401000000008111156102d157600080fd5b8201836020820111156102e357600080fd5b8035906020019184600183028401116401000000008311171561030557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561036857600080fd5b82018360208201111561037a57600080fd5b8035906020019184600183028401116401000000008311171561039c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291905050506107db565b005b34801561040957600080fd5b50610412610c0a565b6040518082815260200191505060405180910390f35b34801561043457600080fd5b5061043d610c12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048b57600080fd5b50610494610c38565b6040518082815260200191505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561050557600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561056d573d6000803e3d6000fd5b5050565b6000806000856040518082805190602001908083835b602083106105aa5780518252602082019150602081019050602083039250610587565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020846040518082805190602001908083835b6020831061061157805182526020820191506020810190506020830392506105ee565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008460ff1660ff168152602001908152602001600020600001546000866040518082805190602001908083835b602083106106955780518252602082019150602081019050602083039250610672565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020856040518082805190602001908083835b602083106106fc57805182526020820191506020810190506020830392506106d9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008560ff1660ff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150935093915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156107d157600080fd5b8060018190555050565b6001543410156107ea57600080fd5b600154341115610840573373ffffffffffffffffffffffffffffffffffffffff166108fc60015434039081150290604051600060405180830381858888f1935050505015801561083e573d6000803e3d6000fd5b505b600061084a610c0a565b9050806000856040518082805190602001908083835b602083106108835780518252602082019150602081019050602083039250610860565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020846040518082805190602001908083835b602083106108ea57805182526020820191506020810190506020830392506108c7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008460ff1660ff168152602001908152602001600020600001541015610ab157610946610c3e565b60405180604001604052808381526020013373ffffffffffffffffffffffffffffffffffffffff168152509050806000866040518082805190602001908083835b602083106109aa5780518252602082019150602081019050602083039250610987565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020856040518082805190602001908083835b60208310610a1157805182526020820191506020810190506020830392506109ee565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008560ff1660ff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505b7f2d00c4f1918c27598c90ad291434cea2c008fc020f5729332db6a56c45613fa984848484336040518080602001806020018660ff1660ff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835288818151815260200191508051906020019080838360005b83811015610b5f578082015181840152602081019050610b44565b50505050905090810190601f168015610b8c5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b83811015610bc5578082015181840152602081019050610baa565b50505050905090810190601f168015610bf25780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a150505050565b600042905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152509056fea2646970667358221220ec7404bdf86f1421fcd23b949aeca63bb3a591108cfc2100352dbeaba3e2cdb464736f6c63430006000033"
	)

	var (
		contractAddr = sdk.AccAddress{0x01}
	)

	commitStateDB := buildCommitStateDB()

	// import state
	var gsImport GenesisState
	err := cdc.UnmarshalJSON(gsImportData, &gsImport)
	require.True(t, err == nil, err)
	commitStateDB.ImportState(gsImport)

	// SetCode which already exist, the state will not changed
	for codeHashStr, code := range gsImport.Codes {
		commitStateDB.SetCode(contractAddr, code)
		require.True(t, codeHashStr == commitStateDB.GetCodeHash(contractAddr).String())
	}
	_, _ = commitStateDB.Commit(true)

	// export state
	gsExport := commitStateDB.ExportState()
	require.True(t, gsImport.EqualWithoutParams(gsExport))

	// SetCode that code not exist
	newCode, err := hexutil.Decode(newCodeHex)
	require.True(t, err == nil)
	newCodeHash := sdk.BytesToHash(crypto.Sha256(newCode))
	commitStateDB.SetCode(contractAddr, newCode)
	_, _ = commitStateDB.Commit(true)

	// export state
	gsExport = commitStateDB.ExportState()

	// update gs
	gsImport.Codes[newCodeHash.String()] = newCode

	// after SetCode, the state will changed
	require.True(t, gsImport.EqualWithoutParams(gsExport))
}
